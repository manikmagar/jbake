import java.text.SimpleDateFormat

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Build-Date': buildDate,
                'Build-Time': buildTime,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': project.name,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.name
        )
    }
}

ext.bintrayUsername = project.hasProperty('bintrayUsername')?bintrayUsername:''
ext.bintrayKey = project.hasProperty('bintrayKey')?bintrayKey:''

bintray {
    user = bintrayUsername
    key = bintrayKey
    configurations = ['archives']

    if ( !project.hasProperty('skipSigning') ) {
        // Copy the signed pom to bintrayDestination
        filesSpec {
            from signPom
            into signPom.bintrayDestination
        }
        signPom.dependsOn install
        bintrayUpload.dependsOn signPom
    }

    dryRun = bintrayDryRun.toBoolean()
    pkg {
        userOrg = bintrayOrg
        repo = bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['MIT']
        labels = ['jbake', 'site-generator']
        websiteUrl = project.website
        issueTrackerUrl = project.issues
        vcsUrl = project.vcs
        publicDownloadNumbers = true
    }
}

